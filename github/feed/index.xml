<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
  xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
  >

  <channel>
    <title xml:lang="en">GitHub Guides</title>
    <atom:link type="application/atom+xml" href="https://guides.github.com/feed/index.xml" rel="self"/>
    <link>https://guides.github.com/</link>
    <pubDate>Tue, 25 Feb 2020 15:49:59 +0000</pubDate>
    <lastBuildDate>Tue, 25 Feb 2020 15:49:59 +0000</lastBuildDate>
    <language>en-US</language>
    <generator>GitHub Guides</generator>
    <description>Learn how to do more with GitHub.</description>

   
     
   
     
   
     
     <item>
       <title>Mastering Markdown</title>
       
         <link>http://guides.github.com/features/mastering-markdown/</link>
       
       <pubDate>Wed, 15 Jan 2014 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/features/mastering-markdown/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;intro&quot; title=&quot;Intro&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;
Markdown is a lightweight and easy-to-use syntax for styling all forms of writing on the GitHub platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you will learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How the Markdown format makes styled collaborative editing easy&lt;/li&gt;
  &lt;li&gt;How Markdown differs from traditional formatting approaches&lt;/li&gt;
  &lt;li&gt;How to use Markdown to format text&lt;/li&gt;
  &lt;li&gt;How to leverage GitHub’s automatic Markdown rendering&lt;/li&gt;
  &lt;li&gt;How to apply GitHub’s unique Markdown extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;what&quot; title=&quot;What is Markdown?&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;What is Markdown?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; is a way to style text on the web. You control the display of the document; formatting words as bold or italic, adding images, and creating lists are just a few of the things we can do with Markdown. Mostly, Markdown is just regular text with a few non-alphabetic characters thrown in, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use Markdown most places around GitHub:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/&quot;&gt;Gists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Comments in Issues and Pull Requests&lt;/li&gt;
  &lt;li&gt;Files with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.md&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.markdown&lt;/code&gt; extension&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information, see “&lt;a href=&quot;https://help.github.com/categories/writing-on-github/&quot;&gt;Writing on GitHub&lt;/a&gt;” in the &lt;em&gt;GitHub Help&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;examples&quot; title=&quot;Examples&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Examples&lt;/h2&gt;

&lt;ul class=&quot;example-nav js-examples-nav&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;selected&quot; data-container-id=&quot;example-text&quot; data-proofer-ignore=&quot;&quot;&gt;Text&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; data-container-id=&quot;example-lists&quot; data-proofer-ignore=&quot;&quot;&gt;Lists&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; data-container-id=&quot;example-images&quot; data-proofer-ignore=&quot;&quot;&gt;Images&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; data-container-id=&quot;example-headers&quot; data-proofer-ignore=&quot;&quot;&gt;Headers &amp;amp; Quotes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; data-container-id=&quot;example-code&quot; data-proofer-ignore=&quot;&quot;&gt;Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#&quot; data-container-id=&quot;example-extras&quot; data-proofer-ignore=&quot;&quot;&gt;Extras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;markdown-example&quot; id=&quot;example-text&quot;&gt;
&lt;pre class=&quot;source&quot;&gt;
It's very easy to make some words **bold** and other words *italic* with Markdown. You can even &lt;span style=&quot;white-space:nowrap&quot;&gt;[link to Google!](http://google.com)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class=&quot;rendered&quot;&gt;
It's very easy to make some words &lt;strong&gt;bold&lt;/strong&gt; and other words &lt;em&gt;italic&lt;/em&gt; with Markdown. You can even &lt;a href=&quot;http://google.com&quot;&gt;link to Google!&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown-example&quot; id=&quot;example-lists&quot; style=&quot;display:none&quot;&gt;
&lt;pre class=&quot;source&quot;&gt;
Sometimes you want numbered lists:

1. One
2. Two
3. Three

Sometimes you want bullet points:

* Start a line with a star
* Profit!

Alternatively,

- Dashes work just as well
- And if you have sub points, put two spaces before the dash or star:
  - Like this
  - And this
&lt;/pre&gt;
&lt;div class=&quot;rendered&quot;&gt;
  &lt;p&gt;Sometimes you want numbered lists:&lt;/p&gt;
  &lt;ol&gt;
  &lt;li&gt;One&lt;/li&gt;
  &lt;li&gt;Two&lt;/li&gt;
  &lt;li&gt;Three&lt;/li&gt;
  &lt;/ol&gt;
  &lt;p&gt;Sometimes you want bullet points:&lt;/p&gt;
  &lt;ul&gt;
  &lt;li&gt;Start a line with a star&lt;/li&gt;
  &lt;li&gt;Profit!&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;Alternatively,&lt;/p&gt;
  &lt;ul&gt;
  &lt;li&gt;Dashes work just as well&lt;/li&gt;
  &lt;li&gt;And if you have sub points, put two spaces before the dash or star:
  &lt;ul&gt;
  &lt;li&gt;Like this&lt;/li&gt;
  &lt;li&gt;And this&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown-example&quot; id=&quot;example-images&quot; style=&quot;display:none&quot;&gt;
&lt;pre class=&quot;source&quot;&gt;
If you want to embed images, this is how you do it:

![Image of Yaktocat](https://octodex.github.com/images/yaktocat.png)
&lt;/pre&gt;
&lt;div class=&quot;rendered&quot;&gt;
  &lt;p&gt;If you want to embed images, this is how you do it:&lt;/p&gt;
  &lt;p&gt;&lt;img src=&quot;https://octodex.github.com/images/yaktocat.png&quot; alt=&quot;Image of Yakotocat&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown-example&quot; id=&quot;example-headers&quot; style=&quot;display:none&quot;&gt;
&lt;pre class=&quot;source&quot;&gt;
# Structured documents

Sometimes it's useful to have different levels of headings to structure your documents. Start lines with a `#` to create headings. Multiple `##` in a row denote smaller heading sizes.

### This is a third-tier heading

You can use one `#` all the way up to `######` six for different heading sizes.

If you'd like to quote someone, use the &amp;gt; character before the line:

&amp;gt; Coffee. The finest organic suspension ever devised... I beat the Borg with it.
&amp;gt; - Captain Janeway
&lt;/pre&gt;
&lt;div class=&quot;rendered&quot;&gt;
  &lt;h1&gt;Structured documents&lt;/h1&gt;

  &lt;p&gt;Sometimes it&amp;rsquo;s useful to have different levels of headings to structure your documents. Start lines with a &lt;code&gt;#&lt;/code&gt; to create headings. Multiple &lt;code&gt;##&lt;/code&gt; in a row denote smaller heading sizes.&lt;/p&gt;

  &lt;h3&gt;This is a third-tier heading&lt;/h3&gt;

  &lt;p&gt;You can use  one &lt;code&gt;#&lt;/code&gt; all the way up to &lt;code&gt;######&lt;/code&gt; six for different heading sizes.&lt;/p&gt;

  &lt;p&gt;If you&amp;rsquo;d like to quote someone, use the &amp;gt; character before the line:&lt;/p&gt;

  &lt;blockquote&gt;&lt;p&gt;Coffee. The finest organic suspension ever devised&amp;hellip; I beat the Borg with it.
  - Captain Janeway&lt;/p&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown-example&quot; id=&quot;example-code&quot; style=&quot;display:none&quot;&gt;
&lt;pre class=&quot;source&quot;&gt;
There are many different ways to style code with GitHub's markdown. If you have inline code blocks, wrap them in backticks: `var example = true`.  If you've got a longer block of code, you can indent with four spaces:

    if (isAwesome){
      return true
    }

GitHub also supports something called code fencing, which allows for multiple lines without indentation:

```
if (isAwesome){
  return true
}
```

And if you'd like to use syntax highlighting, include the language:

```javascript
if (isAwesome){
  return true
}
```
&lt;/pre&gt;
&lt;div class=&quot;rendered&quot;&gt;
  &lt;p&gt;There are many different ways to style code with GitHub&amp;rsquo;s markdown. If you have inline code blocks, wrap them in backticks: &lt;code&gt;var example = true&lt;/code&gt;.  If you&amp;rsquo;ve got a longer block of code, you can indent with four spaces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (isAwesome){
  return true
}
&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;GitHub also supports something called code fencing, which allows for multiple lines without indentation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (isAwesome){
  return true
}
&lt;/code&gt;&lt;/pre&gt;

  &lt;p&gt;And if you&amp;rsquo;d like to use syntax highlighting, include the language:&lt;/p&gt;

&lt;div class=&quot;highlight highlight-javascript&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAwesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;markdown-example&quot; id=&quot;example-extras&quot; style=&quot;display:none&quot;&gt;
&lt;pre class=&quot;source&quot;&gt;
GitHub supports many extras in Markdown that help you reference and link to people. If you ever want to direct a comment at someone, you can prefix their name with an @ symbol: Hey @kneath — love your sweater!

But I have to admit, tasks lists are my favorite:

- [x] This is a complete item
- [ ] This is an incomplete item

When you include a task list in the first comment of an Issue, you will see a helpful progress bar in your list of issues. It works in Pull Requests, too!

And, of course emoji!
&lt;/pre&gt;
&lt;div class=&quot;rendered&quot;&gt;
  &lt;p&gt;GitHub supports many extras in Markdown that help you reference and link to people. If you ever want to direct a comment at someone, you can prefix their name with an @ symbol: Hey &lt;a href=&quot;https://github.com/kneath&quot; class=&quot;user-mention&quot;&gt;@kneath&lt;/a&gt; — love your sweater!&lt;/p&gt;

  &lt;p&gt;But I have to admit, tasks lists are my favorite:&lt;/p&gt;

  &lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
  &lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; checked=&quot;&quot; disabled=&quot;&quot; /&gt; This is a complete item&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
  &lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;&quot; /&gt; This is an incomplete item&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;When you include a task list in the first comment of an Issue, you will see a helpful progress bar in your list of issues. It works in Pull Requests, too!&lt;/p&gt;
  &lt;p&gt;And, of course emoji! &lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;syntax&quot; title=&quot;Basic syntax&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Syntax guide&lt;/h2&gt;

&lt;p&gt;Here’s an overview of Markdown syntax that you can use anywhere on GitHub.com or in your own text files.&lt;/p&gt;

&lt;h3&gt;Headers&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# This is an &amp;lt;h1&amp;gt; tag&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;## This is an &amp;lt;h2&amp;gt; tag&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;###### This is an &amp;lt;h6&amp;gt; tag&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Emphasis&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ge&quot;&gt;*This text will be italic*&lt;/span&gt;
&lt;span class=&quot;ge&quot;&gt;_This will also be italic_&lt;/span&gt;

&lt;span class=&quot;gs&quot;&gt;**This text will be bold**&lt;/span&gt;
&lt;span class=&quot;gs&quot;&gt;__This will also be bold__&lt;/span&gt;

&lt;span class=&quot;ge&quot;&gt;_You **can** combine them_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Lists&lt;/h3&gt;

&lt;h4&gt;Unordered&lt;/h4&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Item 1
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Item 2
&lt;span class=&quot;p&quot;&gt;  *&lt;/span&gt; Item 2a
&lt;span class=&quot;p&quot;&gt;  *&lt;/span&gt; Item 2b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;Ordered&lt;/h4&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; Item 1
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; Item 2
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; Item 3
&lt;span class=&quot;p&quot;&gt;   1.&lt;/span&gt; Item 3a
&lt;span class=&quot;p&quot;&gt;   1.&lt;/span&gt; Item 3b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Images&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GitHub Logo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/images/logo.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
Format: !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Alt Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://github.com - automatic!
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GitHub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;http://github.com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Blockquotes&lt;/h3&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;As Kanye West said:
&lt;span class=&quot;gt&quot;&gt;
&amp;gt; We're living the future so&lt;/span&gt;
&lt;span class=&quot;gt&quot;&gt;&amp;gt; the present is our past.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Inline code&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I think you should use an
`&amp;lt;addr&amp;gt;` element here instead.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;GitHub-flavored-markdown&quot; title=&quot;GFM&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;GitHub Flavored Markdown&lt;/h2&gt;

&lt;p&gt;GitHub.com uses its own version of the Markdown syntax that provides an additional set of useful features, many of which make it easier to work with content on GitHub.com.&lt;/p&gt;

&lt;p&gt;Note that some features of GitHub Flavored Markdown are only available in the descriptions and comments of Issues and Pull Requests. These include @mentions as well as references to SHA-1 hashes, Issues, and Pull Requests. Task Lists are also available in Gist comments and in Gist Markdown files.&lt;/p&gt;

&lt;h3&gt;Syntax highlighting&lt;/h3&gt;

&lt;p&gt;Here’s an example of how you can use syntax highlighting with &lt;a href=&quot;https://help.github.com/articles/basic-writing-and-formatting-syntax/&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```javascript
function fancyAlert(arg) {
  if(arg) {
    $.facebox({div:'#foo'})
  }
}
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also simply indent your code by four spaces:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function fancyAlert(arg) {
      if(arg) {
        $.facebox({div:'#foo'})
      }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s an example of Python code without syntax highlighting:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def foo():
    if not bar:
        return True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Task Lists&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- [x] @mentions, #refs, [links](), **formatting**, and &amp;lt;del&amp;gt;tags&amp;lt;/del&amp;gt; supported
- [x] list syntax required (any unordered or ordered list supported)
- [x] this is a complete item
- [ ] this is an incomplete item
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you include a task list in the first comment of an Issue, you will get a handy progress indicator in your issue list. It also works in Pull Requests!&lt;/p&gt;

&lt;h3&gt;Tables&lt;/h3&gt;

&lt;p&gt;You can create tables by assembling a list of words and dividing them with hyphens &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; (for the first row), and then separating each column with a pipe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;First Header | Second Header
------------ | -------------
Content from cell 1 | Content from cell 2
Content in the first column | Content in the second column
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would become:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;First Header&lt;/th&gt;
      &lt;th&gt;Second Header&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Content from cell 1&lt;/td&gt;
      &lt;td&gt;Content from cell 2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Content in the first column&lt;/td&gt;
      &lt;td&gt;Content in the second column&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3&gt;SHA references&lt;/h3&gt;

&lt;p&gt;Any reference to a commit’s &lt;a href=&quot;http://en.wikipedia.org/wiki/SHA-1&quot;&gt;SHA-1 hash&lt;/a&gt; will be automatically converted into a link to that commit on GitHub.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;16c999e8c71134401a78d4d46435517b2271d6ac
mojombo@16c999e8c71134401a78d4d46435517b2271d6ac
mojombo/github-flavored-markdown@16c999e8c71134401a78d4d46435517b2271d6ac
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Issue references within a repository&lt;/h3&gt;

&lt;p&gt;Any number that refers to an Issue or Pull Request will be automatically converted into a link.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#1
mojombo#1
mojombo/github-flavored-markdown#1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Username @mentions&lt;/h3&gt;

&lt;p&gt;Typing an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt; symbol, followed by a username, will notify that person to come and view the comment. This is called an “@mention”, because you’re &lt;em&gt;mentioning&lt;/em&gt; the individual. You can also @mention teams within an organization.&lt;/p&gt;

&lt;h3&gt;Automatic linking for URLs&lt;/h3&gt;

&lt;p&gt;Any URL (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://www.github.com/&lt;/code&gt;) will be automatically converted into a clickable link.&lt;/p&gt;

&lt;h3&gt;Strikethrough&lt;/h3&gt;

&lt;p&gt;Any word wrapped with two tildes (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~~this~~&lt;/code&gt;) will appear crossed out.&lt;/p&gt;

&lt;h3&gt;Emoji&lt;/h3&gt;

&lt;p&gt;GitHub supports &lt;a href=&quot;https://help.github.com/articles/basic-writing-and-formatting-syntax/#using-emoji&quot;&gt;emoji&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To see a list of every image we support, check out the &lt;a href=&quot;https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md&quot;&gt;Emoji Cheat Sheet&lt;/a&gt;.&lt;/p&gt;
</description>
     </item>
     
   
     
     <item>
       <title>Getting Started with GitHub Pages</title>
       
         <link>http://guides.github.com/features/pages/</link>
       
       <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/features/pages/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;intro&quot; title=&quot;Intro&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;
GitHub Pages are public webpages hosted and easily published through GitHub. The quickest way to get up and running is by using the Jekyll Theme Chooser to load a pre-made theme. You can then modify your GitHub Pages’ content and style remotely via the web or locally on your computer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/pages-home-page.png&quot; alt=&quot;pages-home-page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;setup&quot; title=&quot;Create Your Website&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Create Your Website&lt;/h2&gt;

&lt;p&gt;Once you’ve &lt;a href=&quot;https://github.com/login&quot; target=&quot;_blank&quot;&gt;signed in&lt;/a&gt;, you’ll create a new repository to get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/create-new-repo-button.png&quot; alt=&quot;new-repo-button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the new repository screen, you need to give this repository a special name to generate your website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/create-new-repo-screen.png&quot; alt=&quot;new-repo-screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your website’s files will live in a repository named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt; (where “username” is your actual GitHub user name). To begin setting up your site, you have to open the Settings tab&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/repo-settings.png&quot; alt=&quot;settings-tab&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you scroll down on the settings page, you’ll see the &lt;strong&gt;GitHub Pages&lt;/strong&gt; section near the bottom. Click the &lt;strong&gt;Choose a theme&lt;/strong&gt; button to start the process of creating your site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/launch-theme-chooser.png&quot; alt=&quot;launch-theme-chooser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve clicked the button, you’ll be directed to the Theme Chooser. You’ll see several theme options in a carousel across the top of the page. Click on the images to preview the themes. Once you’ve selected one, click &lt;strong&gt;Select theme&lt;/strong&gt; on the right to move on. It’s easy to change your theme later, so if you’re not sure, just choose one for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/theme-chooser.png&quot; alt=&quot;theme-chooser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s where you’ll write your own content (You can keep the default content for now, if you’d like).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/code-editor.png&quot; alt=&quot;code-editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’re finished editing, scroll down to the bottom of the page and click &lt;strong&gt;Commit changes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/commit-edits.png&quot; alt=&quot;commit-edits&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub does all the work to direct visitors to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username.github.io&lt;/code&gt; to view your new website. This can take up to 10 minutes. After some time has passed, you can open a new tab in your browser to go to your site!&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;changes&quot; title=&quot;Making Changes&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Making Changes&lt;/h2&gt;

&lt;p&gt;One of the first things you can do is remove the default title of your index page, and add a friendlier message to it. Since this is a very quick change – and your first one – you’re going to make it on the default branch: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;View the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file by navigating to it in the &lt;strong&gt;Code&lt;/strong&gt; tab. You can edit the file by clicking on the pencil icon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/edit-file.png&quot; alt=&quot;edit-page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Currently your site has no set title, so we’re falling back to the name of the repo. To change this, I’m going to add the line “title: Welcome to the Octocat’s homepage!” to this file. Feel free to do the same, except for your own username.&lt;/p&gt;

&lt;p&gt;Under this title, you can add a message about the purpose of the page and describe what you want people to do while they’re here. I’m going set mine to “Feel free to bookmark this to keep an eye on my project updates”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/change-title-description.png&quot; alt=&quot;change-title-description&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you’re done making this small change, scroll to the bottom of the page to make your second commit. You have two places to write about this change: a subject and an extended description. The extended description is optional, so let’s leave a descriptive message in the subject.&lt;/p&gt;

&lt;p&gt;When you’re done, click &lt;strong&gt;Commit changes&lt;/strong&gt; and your updates will go live in just a few seconds!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/pages/commit-messages-matter.png&quot; alt=&quot;be-descriptive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;next-steps&quot; title=&quot;Next Steps&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Just because you’ve made some changes into your project doesn’t mean you should stop! Check out these other guides to learn how to contribute to other projects or perfect the way you work on projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/introduction/flow&quot;&gt;GitHub flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/activities/contributing-to-open-source/&quot;&gt;Contributing to Open Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/features/mastering-markdown/&quot;&gt;Mastering Markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
     </item>
     
   
     
     <item>
       <title>Documenting your projects on GitHub</title>
       
         <link>http://guides.github.com/features/wikis/</link>
       
       <pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/features/wikis/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;intro&quot; title=&quot;Intro&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;
Good documentation is key to the success of any project. Making documentation accessible enables people to learn about a project; making it easy to update ensures that documentation stays relevant.&lt;/p&gt;

&lt;p&gt;Two common ways to document a project are &lt;em&gt;README files&lt;/em&gt; and &lt;em&gt;wikis&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;README files are a quick and simple way for other users to learn more about your work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Wikis on GitHub help you present in-depth information about your project in a useful way.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s a good idea to at least have a README on your project, because it’s the first thing many people will read when they first find your work.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;creating-a-readme&quot; title=&quot;Creating your README&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Creating your README&lt;/h2&gt;

&lt;p&gt;When you &lt;a href=&quot;https://help.github.com/articles/creating-a-new-repository/&quot;&gt;create a new repository&lt;/a&gt; though GitHub, select “Initialize this repository with a README” unless you plan to import an existing repository.
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/4122993/16925080/64863a10-4cd7-11e6-8da7-b31a29b769f2.png&quot; alt=&quot;Screenshot of initializing a README&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your README.md file is now available for editing in your brand-new repository. Your project’s name is at the top, followed by any description you chose to include when creating the repository. READMEs are easy to modify, both &lt;a href=&quot;https://help.github.com/articles/editing-files-in-your-repository/&quot;&gt;on GitHub&lt;/a&gt; or locally. Check out the &lt;a href=&quot;http://guides.github.com/features/mastering-markdown/&quot;&gt;Mastering Markdown guide&lt;/a&gt; to learn more about how to modify the text within the file after you’ve made it.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;Formatting-a-readme&quot; title=&quot;Formatting your README&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Formatting your README&lt;/h2&gt;

&lt;p&gt;READMEs generally follow one format in order to immediately orient developers to the most important aspects of your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Project name&lt;/strong&gt;: Your project’s name is the first thing people will see upon scrolling down to your README, and is included upon creation of your README file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: A description of your project follows. A good description is clear, short, and to the point. Describe the importance of your project, and what it does.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;: Optionally, include a table of contents in order to allow other people to quickly navigate especially long or detailed READMEs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;: Installation is the next section in an effective README. Tell other users how to install your project locally. Optionally, include a gif to make the process even more clear for other people.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;: The next section is usage, in which you instruct other people on how to use your project after they’ve installed it. This would also be a good place to include screenshots of your project in action.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: Larger projects often have sections on contributing to their project, in which contribution instructions are outlined. Sometimes, this is a separate file. If you have specific contribution preferences, explain them so that other developers know how to best contribute to your work. To learn more about how to help others contribute, check out the guide for &lt;a href=&quot;https://help.github.com/articles/setting-guidelines-for-repository-contributors/&quot;&gt;setting guidelines for repository contributors&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Credits&lt;/strong&gt;: Include a section for credits in order to highlight and link to the authors of your project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;License&lt;/strong&gt;: Finally, include a section for the license of your project. For more information on choosing a license, check out GitHub’s &lt;a href=&quot;http://choosealicense.com/&quot;&gt;licensing guide&lt;/a&gt;!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your README should contain only the necessary information for developers to get started using and contributing to your project. Longer documentation is best suited for wikis, outlined below.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;creating-your-wiki&quot; title=&quot;Creating your wiki&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Creating your wiki&lt;/h2&gt;

&lt;p&gt;Every repository on GitHub comes with a wiki. After you’ve created a repository, you can set up the included wiki through the sidebar navigation. Starting your wiki is simply a matter of clicking the wiki button and creating your first page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/wikis/wiki-blank-slate.png&quot; alt=&quot;Screenshot of the starting page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;adding-content&quot; title=&quot;Adding content&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Adding content&lt;/h2&gt;

&lt;p&gt;Wiki content is designed to be easily editable. You can add or change content on any wiki page by clicking the &lt;strong&gt;Edit&lt;/strong&gt; button located in the upper right corner of each page. This opens up the wiki editor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/wikis/wiki-editor.png&quot; alt=&quot;Screenshot of the wiki editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wiki pages can be written in any format supported by &lt;a href=&quot;http://github.com/github/markup&quot;&gt;GitHub Markup&lt;/a&gt;. Using the drop-down menu in the editor, you can select the format of your wiki, and then use wiki toolbar to create and include content on a page. Wikis also give you the option of including a custom footer where you can list things like contact details or license information for your project.&lt;/p&gt;

&lt;p&gt;GitHub keeps track of changes made to each page in your wiki. Below a page title, you can see who made the most recent edits, in addition to the number of commits made to the page. Clicking on this information will take you to the full page history where you can compare revisions or see a detailed list of edits over time.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;adding-pages&quot; title=&quot;Adding pages&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Adding pages&lt;/h2&gt;

&lt;p&gt;You can add additional pages to your wiki by selecting &lt;strong&gt;New Page&lt;/strong&gt; in the upper right corner. By default, each page you create is included automatically in your wiki’s sidebar and listed in alphabetical order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/wikis/wiki-sidebar-closeup.png&quot; alt=&quot;Screenshot of the wiki sidebar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also add a custom sidebar to your wiki by clicking the &lt;strong&gt;Add custom sidebar&lt;/strong&gt; link. Custom sidebar content can include text, images, and links.&lt;/p&gt;

&lt;p&gt;Note: The page called “Home” functions as the entrance page to your wiki. If it is missing, an automatically generated table of contents will be shown instead.&lt;/p&gt;

&lt;div class=&quot;alert&quot;&gt;
  &lt;p&gt;
    If you're knowledgable with the command line, you can also modify wikis locally. Check out &lt;a href=&quot;https://help.github.com/articles/adding-and-editing-wiki-pages-locally&quot;&gt;our help article&lt;/a&gt; for more info.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a id=&quot;syntax-highlighting&quot; title=&quot;Syntax highlighting&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Syntax highlighting&lt;/h2&gt;

&lt;p&gt;Wiki pages support automatic syntax highlighting of code for a wide range of languages by using the following syntax:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```ruby
  def foo
    puts 'bar'
  end
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The block must start with three backticks, optionally followed by the the name of the language that is contained by the block. See &lt;a href=&quot;http://pygments.org/docs/lexers/&quot;&gt;Pygments for the list of languages&lt;/a&gt; that can be syntax highlighted.&lt;/p&gt;

&lt;p&gt;The block contents should be indented at the same level as the opening backticks. The block must end with three backticks indented at the same level as the opening backticks.&lt;/p&gt;

&lt;h2&gt;You’re done!&lt;/h2&gt;

&lt;p&gt;You have learned some important information about how to best share your work with the rest of the GitHub community, whether your project is large enough in scope for its own wiki or you’re just starting out and setting up a clear and concise README.&lt;/p&gt;

&lt;p&gt;To read more on the topics covered in this article, our guides for &lt;a href=&quot;https://help.github.com/articles/creating-a-new-repository/&quot;&gt;creating a new repository&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/articles/editing-files-in-your-repository/&quot;&gt;editing files in your repository&lt;/a&gt;, &lt;a href=&quot;https://help.github.com/articles/setting-guidelines-for-repository-contributors/&quot;&gt;setting guidelines for repository contributors&lt;/a&gt; and &lt;a href=&quot;http://choosealicense.com&quot;&gt;choosing a license&lt;/a&gt; are great places to start. Otherwise, check out some other &lt;a href=&quot;http://guides.github.com/&quot;&gt;GitHub Guides&lt;/a&gt; to keep learning.&lt;/p&gt;

&lt;p&gt;Finally, if you’re interested in building a documentation site for your project, we recommend using &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
</description>
     </item>
     
   
     
     <item>
       <title>Mastering Issues</title>
       
         <link>http://guides.github.com/features/issues/</link>
       
       <pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/features/issues/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;intro&quot; title=&quot;Intro&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;
Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. They’re kind of like email—except they can be shared and discussed with the rest of your team. Most software projects have a bug tracker of some kind. GitHub’s tracker is called &lt;strong&gt;Issues&lt;/strong&gt;, and has its own section in every repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/navigation-highlight.png&quot; alt=&quot;Highlighting navigation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, let’s take a look at &lt;a href=&quot;https://github.com/twbs/bootstrap/issues&quot; target=&quot;_blank&quot;&gt;Bootstrap’s Issues section&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/listing-screen.png&quot; alt=&quot;List of issues&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub’s issue tracking is special because of our focus on collaboration, references, and excellent text formatting. A typical issue on GitHub looks a bit like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/example-issue.png&quot; alt=&quot;An example issue&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;title&lt;/strong&gt; and &lt;strong&gt;description&lt;/strong&gt; describe what the issue is all about.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Color-coded &lt;strong&gt;labels&lt;/strong&gt; help you categorize and filter your issues (just like labels in email).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;milestone&lt;/strong&gt; acts like a container for issues. This is useful for associating issues with specific features or project phases (e.g. &lt;em&gt;Weekly Sprint 9/5-9/16&lt;/em&gt; or &lt;em&gt;Shipping 1.0&lt;/em&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;One &lt;strong&gt;assignee&lt;/strong&gt; is responsible for working on the issue at any given time.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Comments&lt;/strong&gt; allow anyone with access to the repository to provide feedback.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;filtering&quot; title=&quot;Milestones, Labels &amp;amp; Assignees&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Milestones, Labels, and Assignees&lt;/h2&gt;

&lt;p&gt;Once you’ve collected a lot of issues, you may find it hard to find the ones you care about. &lt;strong&gt;Milestones&lt;/strong&gt;, &lt;strong&gt;labels&lt;/strong&gt;, and &lt;strong&gt;assignees&lt;/strong&gt; are great features to filter and categorize issues.&lt;/p&gt;

&lt;p&gt;You can change or add a milestone, an assignee, and labels by clicking their corresponding gears in the sidebar on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/labels.png&quot; alt=&quot;Viewing labels&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you don’t see edit buttons, that’s because you don’t have permission to edit the issue. You can ask the repository owner to add you as a collaborator to get access.&lt;/p&gt;

&lt;h3&gt;Milestones&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/milestones.png&quot; alt=&quot;Viewing Milestones&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Milestones are groups of issues that correspond to a project, feature, or time period. People use them in many different ways in software development. Some examples of milestones on GitHub include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Beta Launch&lt;/strong&gt; — File bugs that you need to fix before you can launch the beta of your project. It’s a great way to make sure you aren’t missing anything.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;October Sprint&lt;/strong&gt; — File issues that you’d like to work on in October. A great way to focus your efforts when there’s a lot to do.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Redesign&lt;/strong&gt; — File issues related to redesigning your project. A great way to collect ideas on what to work on.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Labels&lt;/h3&gt;

&lt;p&gt;Labels are a great way to organize different types of issues. Issues can have as many labels as you want, and you can filter by one or many labels at once.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/labels-listing.png&quot; alt=&quot;Viewing label listings&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Assignees&lt;/h3&gt;

&lt;p&gt;Each issue can have an assignee — one person that’s responsible for moving the issue forward. Assignees are selected the same way milestones are, through the grey bar at the top of the issue.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;notifications&quot; title=&quot;Notifications, @mentions, and references&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Notifications, @mentions, and References&lt;/h2&gt;

&lt;p&gt;By using @mentions and references inside of Issues, you can notify other GitHub users &amp;amp; teams, and cross-connect issues to each other. These provide a flexible way to get the right people involved to resolve issues effectively, and are easy to learn and use. They work across all text fields on GitHub — they’re a part of our text formatting syntax called &lt;a href=&quot;https://help.github.com/articles/writing-on-github#name-and-team-mentions-autocomplete&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/markdown-example.png&quot; alt=&quot;Example of Markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’d like to learn more, have a look at &lt;strong&gt;&lt;a href=&quot;http://guides.github.com/features/mastering-markdown/&quot;&gt;Mastering Markdown&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;Notifications&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/notifications&quot; target=&quot;_blank&quot;&gt;Notifications&lt;/a&gt; are GitHub’s way to keep up to date with your Issues. You can use them to find out about new issues on repositories, or just to know when someone needs your input to move forward on an issue.&lt;/p&gt;

&lt;p&gt;There are two ways to receive notifications: via email, and via the web. You can configure how you receive notifications &lt;a href=&quot;https://github.com/settings/notifications&quot; target=&quot;_blank&quot;&gt;in your settings&lt;/a&gt;. If you plan on receiving a lot of notifications, we like to recommend that you receive web + email notifications for &lt;strong&gt;Participating&lt;/strong&gt; and web notifications for &lt;strong&gt;Watching&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/notifications.png&quot; alt=&quot;Screenshot of notifications&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With these settings, you receive emails when people specifically mention you, then visit the web-based interface to keep up to date with repositories you’re interested in.&lt;/p&gt;

&lt;p&gt;You can access your notifications through the &lt;a href=&quot;https://github.com/notifications&quot; target=&quot;_blank&quot;&gt;notifications&lt;/a&gt; screen. This screen is nice for scanning many notifications at once and marking them as read or muting the thread. Try using keyboard shortcuts to speed up your workflow here — press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; on the page to see which shortcuts are available.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/notification.png&quot; alt=&quot;Screenshot of an individual notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Muted threads won’t show up as unread again until you are specifically @mentioned again. This makes muting a great strategy for threads that you have little interest in (perhaps a sub-system that you aren’t familiar with). If you mark an issue as read, it will stay that way until someone comments on the thread again.&lt;/p&gt;

&lt;p&gt;GitHub also syncs read/unread status for email notifications — if you read a notification in your email client, it will be marked as read in the web-based interface (make sure you allow your email client to display images if you’d like this functionality).&lt;/p&gt;

&lt;h3&gt;@mentions&lt;/h3&gt;

&lt;p&gt;@mentions are the way that we reference other GitHub users inside of GitHub Issues. Inside of the description or any comment of the issue, include the @username of another GitHub user to send them a notification. This works very similar to how Twitter uses @mentions.&lt;/p&gt;

&lt;p&gt;We like to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/cc&lt;/code&gt; syntax (an abbreviation for carbon copy) to include people in issues:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?&lt;/p&gt;

  &lt;p&gt;/cc @kneath @jresig&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This works great if you know the specific users to include, but many times we’re working across teams and don’t really know who might be able to help us. @mentions also work for Teams within your GitHub organization. If you create a Team called &lt;em&gt;browser-bugs&lt;/em&gt; under the @acmeinc organization, you can reference the team with @mentions:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;/cc @acmeinc/browser-bugs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will send notifications to every member of the browser-bugs team.&lt;/p&gt;

&lt;h3&gt;References&lt;/h3&gt;

&lt;p&gt;Often times issues are dependent on other issues, or at least relate to them and you’d like to connect the two. You can reference issues by typing in a hashtag plus the issue number.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Hey @kneath, I think the problem started in #42&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you do this, we’ll create an event inside of issue #42 that looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/reference.png&quot; alt=&quot;Screenshot of creating a reference&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Issue in another repository? Just include the repository before the name like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kneath/example-project#42&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One of the more interesting ways to use GitHub Issues is to reference issues directly from commits. Include the issue number inside of the commit message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/commit.png&quot; alt=&quot;Screenshot of referencing a commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By prefacing your commits with “Fixes”, “Fixed”, “Fix”, “Closes”, “Closed”, or “Close” when the commit is merged into master, it will also automatically close the issue.&lt;/p&gt;

&lt;p&gt;References make it possible to deeply connect the work being done with the bug being tracked, and are a great way to add visibility into the history of your project.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;search&quot; title=&quot;Search&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Search&lt;/h2&gt;

&lt;p&gt;At the very top of each page is a search box that lets you search through issues.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/search.png&quot; alt=&quot;Screenshot of making a search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can scope search results by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Keyword, such as, &lt;a href=&quot;https://github.com/twbs/bootstrap/issues?q=sidebar&quot;&gt;all issues mentioning the sidebar&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;State, such as, &lt;a href=&quot;https://github.com/twbs/bootstrap/issues?q=sidebar+is%3Aclosed&quot;&gt;all issues mentioning the sidebar that are closed&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Assignee, such as, &lt;a href=&quot;https://github.com/twbs/bootstrap/issues?q=sidebar+is%3Aclosed+assignee%3Amdo&quot;&gt;all issues mentioning the sidebar that were assigned to @mdo&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/using-search-to-filter-issues-and-pull-requests&quot;&gt;Our Help article on searching Issues&lt;/a&gt; can show you other ways to search: using created/updated dates, labels, authors, comment counts, by repository owner, and more.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;overviews&quot; title=&quot;Overviews &amp;amp; Reports&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Overviews &amp;amp; Reports&lt;/h2&gt;

&lt;p&gt;Outside of the Issues section, there are two other pages that help summarize what’s going on with Issues across your repository and across all of your repositories.&lt;/p&gt;

&lt;h3&gt;The Issue Dashboard&lt;/h3&gt;

&lt;p&gt;If you’re looking for a broader listing of all of your issues across many projects, the &lt;a href=&quot;https://github.com/issues&quot; target=&quot;_blank&quot; data-proofer-ignore=&quot;&quot;&gt;Issues Dashboard&lt;/a&gt; can be a great tool. The dashboard works very similar to the issues section, but collects issues differently:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All issues in repositories you own and collaborate on&lt;/li&gt;
  &lt;li&gt;Issues assigned to you&lt;/li&gt;
  &lt;li&gt;Issues you’ve created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you use organizations, each one has its own Issues dashboard that separates out Issues within the organization.&lt;/p&gt;

&lt;h3&gt;Pulse&lt;/h3&gt;

&lt;p&gt;Underneath each repository is a section called &lt;strong&gt;Pulse&lt;/strong&gt; — Pulse is a snapshot of everything that’s happened in the repository in the past week (or day, or past 3 months, etc).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/features/issues/pulse.png&quot; alt=&quot;Screenshot of the Pulse feature&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a great way to catch up with repositories when you’ve been away and don’t want the granularity notifications offer when watching a repository.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;uses&quot; title=&quot;Other uses for Issues&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Other Uses for Issues&lt;/h2&gt;

&lt;p&gt;Issues are great for tracking all kinds of things — and GitHub is a great place to easily share and collaborate on your issues.  Here’s some of our favorites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/joyent/node/issues&quot; target=&quot;_blank&quot;&gt;Bug tracker for your open source projects&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/newmerator/recipes/issues&quot; target=&quot;_blank&quot;&gt;Request for recipes&lt;/a&gt; (maybe you have a good &lt;strong&gt;&lt;a href=&quot;https://github.com/newmerator/recipes/issues/3&quot; target=&quot;_blank&quot;&gt;gluten-free pizza dough recipe&lt;/a&gt;?&lt;/strong&gt;)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Fin&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Now congratulate yourself&lt;/strong&gt; — that was a lot to read! Issue management is one of the most powerful tools at any developer’s disposal. I guess all that’s left is to actually fix the bugs now.&lt;/p&gt;
</description>
     </item>
     
   
     
     <item>
       <title>Git Handbook</title>
       
         <link>http://guides.github.com/introduction/git-handbook/</link>
       
       <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/introduction/git-handbook/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;version-control&quot; title=&quot;What is Version Control?&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;What’s a version control system?&lt;/h3&gt;

&lt;p&gt;A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As the project evolves, teams can run tests, fix bugs, and contribute new code with the confidence that any version can be recovered at any time. Developers can review project history to find out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which changes were made?&lt;/li&gt;
  &lt;li&gt;Who made the changes?&lt;/li&gt;
  &lt;li&gt;When were the changes made?&lt;/li&gt;
  &lt;li&gt;Why were changes needed?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;What’s a distributed version control system?&lt;/h3&gt;

&lt;p&gt;Git is an example of a distributed version control system (DVCS) commonly used for open source and commercial software development. DVCSs allow full access to every file, branch, and iteration of a project, and allows every user access to a full and self-contained history of all changes. Unlike once popular centralized version control systems, DVCSs like Git don’t need a constant connection to a central repository. Developers can work anywhere and collaborate asynchronously from any time zone.&lt;/p&gt;

&lt;p&gt;Without version control, team members are subject to redundant tasks, slower timelines, and multiple copies of a single project. To eliminate unnecessary work, Git and other VCSs give each contributor a unified and consistent view of a project, surfacing work that’s already in progress. Seeing a transparent history of changes, who made them, and how they contribute to the development of a project helps team members stay aligned while working independently.&lt;/p&gt;

&lt;h3&gt;Why Git?&lt;/h3&gt;

&lt;p&gt;According to the latest &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017#technology&quot;&gt;Stack Overflow developer survey&lt;/a&gt;, more than 70 percent of developers use Git, making it the most-used VCS in the world. Git is commonly used for both open source and commercial software development, &lt;strong&gt;with significant benefits&lt;/strong&gt; for individuals, teams and businesses.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Git lets developers see the entire timeline of their changes, decisions, and progression of any project in one place. From the moment they access the history of a project, the developer has all the context they need to understand it and start contributing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Developers work in every time zone. With a DVCS like Git, collaboration can happen any time while maintaining source code integrity. Using branches, developers can safely propose changes to production code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Businesses using Git can break down communication barriers between teams and keep them focused on doing their best work. Plus, Git makes it possible to align experts across a business to collaborate on major projects.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;repository&quot; title=&quot;Repositories&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;What’s a repository?&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;repository&lt;/em&gt;, or &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git project&lt;/a&gt;, encompasses the entire collection of files and folders associated with a project, along with each file’s revision history. The file history appears as snapshots in time called &lt;em&gt;commits&lt;/em&gt;, and the commits exist as a linked-list relationship, and can be organized into multiple lines of development called &lt;em&gt;branches&lt;/em&gt;. Because Git is a DVCS, repositories are self-contained units and anyone who owns a copy of the repository can access the entire codebase and its history. Using the command line or other ease-of-use interfaces, a git repository also allows for: interaction with the history, cloning, creating branches, committing, merging, comparing changes across versions of code, and more.&lt;/p&gt;

&lt;p&gt;Working in repositories keeps development projects organized and protected. Developers are encouraged to fix bugs, or create fresh features, without fear of derailing mainline development efforts. Git facilitates this through the use of topic branches: lightweight pointers to commits in history that can be easily created and deprecated when no longer needed.&lt;/p&gt;

&lt;p&gt;Through platforms like GitHub, Git also provides more opportunities for project transparency and collaboration. Public repositories help teams work together to build the best possible final product.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;basic-git&quot; title=&quot;Basic Git&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Basic Git commands&lt;/h3&gt;

&lt;p&gt;To use Git, developers use specific commands to copy, create, change, and combine code. These commands can be executed directly from the command line or by using an application like &lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt; or Git Kraken. Here are some common commands for using Git:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt; creates a local copy of a project that already exists remotely. The clone includes all the project’s files, history, and branches.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; stages a change. Git tracks changes to a developer’s codebase, but it’s necessary to stage and take a snapshot of the changes to include them in the project’s history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project’s history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that’s been staged with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; will become a part of the snapshot with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; shows the status of changes as untracked, modified, or staged.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt; shows the branches being worked on locally.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the master branch for deployment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; updates the remote repository with any commits made locally to a branch.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more from &lt;a href=&quot;https://git-scm.com/docs&quot;&gt;a full reference guide to Git commands&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Explore more Git commands&lt;/h4&gt;

&lt;p&gt;For a detailed look at Git practices, the videos below show how to get the most out of some Git commands.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=rBbbOouhI-s&amp;amp;index=2&amp;amp;list=PLg7s6cbtAD17Gw5u8644bgKhgRLiJXdX4&quot;&gt;Working locally&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SxmveNrZb5k&amp;amp;list=PLg7s6cbtAD17Gw5u8644bgKhgRLiJXdX4&amp;amp;index=3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Vb0Ghkkc2hk&amp;amp;index=4&amp;amp;list=PLg7s6cbtAD17Gw5u8644bgKhgRLiJXdX4&quot;&gt;Two-step commits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-uQHV9GOA0w&amp;amp;index=5&amp;amp;list=PLg7s6cbtAD17Gw5u8644bgKhgRLiJXdX4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;github&quot; title=&quot;GitHub&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;How GitHub fits in&lt;/h3&gt;

&lt;p&gt;GitHub is a Git hosting repository that provides developers with tools to ship better code through command line features, issues (threaded discussions), pull requests, code review, or the use of a collection of free and for-purchase apps in the GitHub Marketplace. With collaboration layers like the GitHub flow, a community of 15 million developers, and an ecosystem with hundreds of integrations, GitHub changes the way software is built.&lt;/p&gt;

&lt;h3&gt;How GitHub works&lt;/h3&gt;

&lt;p&gt;GitHub builds collaboration directly into the development process. Work is organized into repositories, where developers can outline requirements or direction and set expectations for team members. Then, using the GitHub flow, developers simply create a branch to work on updates, commit changes to save them, open a pull request to propose and discuss changes, and merge pull requests once everyone is on the same page.&lt;/p&gt;

&lt;h3&gt;The GitHub flow&lt;/h3&gt;

&lt;p&gt;The GitHub flow is a lightweight, branch-based workflow built around core Git commands used by teams around the globe—including ours.&lt;/p&gt;

&lt;p&gt;The GitHub flow has six steps, each with distinct benefits when implemented:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Create a branch:&lt;/strong&gt; Topic branches created from the canonical deployment branch (usually &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;) allow teams to contribute to many parallel efforts. Short-lived topic branches, in particular, keep teams focused and results in quick ships.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Add commits:&lt;/strong&gt; Snapshots of development efforts within a branch create safe, revertible points in the project’s history.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Open a pull request:&lt;/strong&gt; Pull requests publicize a project’s ongoing efforts and set the tone for a transparent development process.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Discuss and review code:&lt;/strong&gt; Teams participate in code reviews by commenting, testing, and reviewing open pull requests. Code review is at the core of an open and participatory culture.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merge:&lt;/strong&gt; Upon clicking merge, GitHub automatically performs the equivalent of a local ‘git merge’ operation. GitHub also keeps the entire branch development history on the merged pull request.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deploy:&lt;/strong&gt; Teams can choose the best release cycles or incorporate continuous integration tools and operate with the assurance that code on the deployment branch has gone through a robust workflow.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Learn more about the GitHub flow&lt;/h4&gt;

&lt;p&gt;Developers can find more information about the GitHub flow in the resources provided below.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.github.com/introduction/flow/&quot;&gt;Interactive guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=47E-jcuQz5c&amp;amp;index=1&amp;amp;list=PLg7s6cbtAD17Gw5u8644bgKhgRLiJXdX4&quot;&gt;GitHub Flow video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;GitHub and the command line&lt;/h3&gt;

&lt;p&gt;For developers new to the command line, the GitHub Training team has put together a series of &lt;a href=&quot;https://help.github.com/articles/git-and-github-learning-resources/&quot;&gt;tutorials&lt;/a&gt; on Git commands to guide the way. Sometimes, a series of commands can paint a picture of how to use Git:&lt;/p&gt;

&lt;h4&gt;Example: Contribute to an existing repository&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# download a repository on GitHub.com to our machine&lt;/span&gt;
git clone https://github.com/me/repo.git

&lt;span class=&quot;c&quot;&gt;# change into the `repo` directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;repo

&lt;span class=&quot;c&quot;&gt;# create a new branch to store any new changes&lt;/span&gt;
git branch my-branch

&lt;span class=&quot;c&quot;&gt;# switch to that branch (line of development)&lt;/span&gt;
git checkout my-branch

&lt;span class=&quot;c&quot;&gt;# make changes, for example, edit `file1.md` and `file2.md` using the text editor&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# stage the changed files&lt;/span&gt;
git add file1.md file2.md

&lt;span class=&quot;c&quot;&gt;# take a snapshot of the staging area (anything that's been added)&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my snapshot&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# push changes to github&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;--set-upstream&lt;/span&gt; origin my-branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;Example: Start a new repository and publish it to GitHub&lt;/h4&gt;

&lt;p&gt;First, you will need to create a new repository on GitHub. You can learn how to create a new repository in our &lt;a href=&quot;https://guides.github.com/activities/hello-world/#repository&quot;&gt;Hello World guide&lt;/a&gt;. &lt;strong&gt;Do not&lt;/strong&gt; initialize the repository with a README, .gitignore or License. This empty repository will await your code.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create a new directory, and initialize it with git-specific functions&lt;/span&gt;
git init my-repo

&lt;span class=&quot;c&quot;&gt;# change into the `my-repo` directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-repo

&lt;span class=&quot;c&quot;&gt;# create the first file in the project&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;README.md

&lt;span class=&quot;c&quot;&gt;# git isn't aware of the file, stage it&lt;/span&gt;
git add README.md

&lt;span class=&quot;c&quot;&gt;# take a snapshot of the staging area&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;add README to initial commit&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# provide the path for the repository you created on github&lt;/span&gt;
git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git

&lt;span class=&quot;c&quot;&gt;# push changes to github&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;--set-upstream&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;Example: contribute to an existing branch on GitHub&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# assumption: a project called `repo` already exists on the machine, and a new branch has been pushed to GitHub.com since the last time changes were made locally&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# change into the `repo` directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;repo

&lt;span class=&quot;c&quot;&gt;# update all remote tracking branches, and the currently checked out branch&lt;/span&gt;
git pull

&lt;span class=&quot;c&quot;&gt;# change into the existing branch called `feature-a`&lt;/span&gt;
git checkout feature-a

&lt;span class=&quot;c&quot;&gt;# make changes, for example, edit `file1.md` using the text editor&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# stage the changed file&lt;/span&gt;
git add file1.md

&lt;span class=&quot;c&quot;&gt;# take a snapshot of the staging area&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;edit file1&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# push changes to github&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;Models for collaborative development&lt;/h3&gt;

&lt;p&gt;There are two primary ways people collaborate on GitHub:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Shared repository&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/about-forks/&quot;&gt;Fork&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot;&gt;pull&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With a &lt;em&gt;shared repository&lt;/em&gt;, individuals and teams are explicitly designated as contributors with read, write, or administrator access. This simple permission structure, combined with features like protected branches and Marketplace, helps teams progress quickly when they adopt GitHub.&lt;/p&gt;

&lt;p&gt;For an open source project, or for projects to which anyone can contribute, managing individual permissions can be challenging, but a &lt;em&gt;fork and pull&lt;/em&gt; model allows anyone who can view the project to contribute. A fork is a copy of a project under an developer’s personal account. Every developer has full control of their fork and is free to implement a fix or new feature. Work completed in forks is either kept separate, or is surfaced back to the original project via a pull request. There, maintainers can review the suggested changes before they’re merged. See the &lt;a href=&quot;https://guides.github.com/activities/forking/&quot;&gt;Forking Projects Guide&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3&gt;Learn at your own pace&lt;/h3&gt;

&lt;p&gt;The GitHub team has created a library of educational videos and guides to help users continue to develop their skills and build better software.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/showcases/great-for-new-contributors&quot;&gt;Beginner projects to explore&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtube.com/githubguides&quot;&gt;GitHub video guides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://services.github.com/on-demand/&quot;&gt;GitHub on-demand training&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.github.com/&quot;&gt;GitHub training guides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://services.github.com/resources/&quot;&gt;GitHub training resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
     </item>
     
   
     
     <item>
       <title>Understanding the GitHub flow</title>
       
         <link>http://guides.github.com/introduction/flow/</link>
       
       <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/introduction/flow/index.md</guid>
       <description>&lt;p&gt;GitHub flow is a lightweight, branch-based workflow that supports teams and projects where deployments are made regularly. This guide explains how and why GitHub flow works.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;flow.js&quot;&gt;&lt;/script&gt;

&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;flow.css&quot; /&gt;

&lt;div class=&quot;scrollable-diagram js-scrollable-diagram&quot;&gt;
  &lt;div class=&quot;features-branch-diagram&quot; id=&quot;js-features-branch-diagram&quot;&gt;
    &lt;svg width=&quot;930px&quot; height=&quot;350&quot; id=&quot;js-features-branch-diagram-svg&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
      &lt;path d=&quot;M66.2711864,5.96363636 C135.523206,5.96363636 143.460673,112 191.02837,112 C238.596067,112 681.049887,112 725.83852,112 C770.627152,112 786.056674,5.95721244 855.110732,5.96363636&quot; id=&quot;js-branch-diagram-branch&quot; stroke=&quot;#4182C4&quot; stroke-width=&quot;4&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;
      &lt;path d=&quot;M0,7 L766,7 L920,7&quot; id=&quot;js-branch-diagram-master&quot; stroke=&quot;#c6d9ed&quot; stroke-width=&quot;8&quot;&gt;&lt;/path&gt;
      &lt;path id=&quot;js-branch-diagram-arrow&quot; d=&quot;M907.2,10 C910.98,8.95 915.22,8.05 918,7 C914.22,5.95 910.98,5.05 907.2,4&quot; stroke=&quot;#c6d9ed&quot; stroke-width=&quot;8&quot; fill=&quot;none&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;

    &lt;div class=&quot;diagram-icon js-diagram-icon diagram-icon-branch&quot; data-diagram-step=&quot;branch&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-branch&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-commit-1&quot; data-diagram-step=&quot;commits&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-commit-2&quot; data-diagram-step=&quot;commits&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-commit-3&quot; data-diagram-step=&quot;commits&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon js-diagram-icon diagram-icon-pr&quot; data-diagram-step=&quot;pr&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-pull-request&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon js-diagram-icon diagram-icon-merge&quot; data-diagram-step=&quot;merge&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-merge&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-discussion-1&quot; data-diagram-step=&quot;code-review&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-comment-discussion&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-commit-4&quot; data-diagram-step=&quot;code-review&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-discussion-2&quot; data-diagram-step=&quot;code-review&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-comment-discussion&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-commit-5&quot; data-diagram-step=&quot;code-review&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-discussion-3&quot; data-diagram-step=&quot;code-review&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-comment-discussion&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon-small js-diagram-icon-small diagram-icon-commit-6&quot; data-diagram-step=&quot;code-review&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-git-commit&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class=&quot;diagram-icon js-diagram-icon-small diagram-icon-deploy&quot; data-diagram-step=&quot;deploy&quot;&gt;
      &lt;span class=&quot;mega-octicon octicon-squirrel&quot;&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;flow-content&quot;&gt;

  &lt;div class=&quot;panel-content js-panel-content js-panel-content-branch&quot; data-step=&quot;branch&quot;&gt;
    &lt;h3&gt;Create a branch&lt;/h3&gt;

    &lt;p&gt;When you're working on a project, you're going to have a bunch of different features or ideas in progress at any given time – some of which are ready to go, and others which are not. Branching exists to help you manage this workflow.&lt;/p&gt;

    &lt;p&gt;When you create a branch in your project, you're creating an environment where you can try out new ideas. Changes you make on a branch don't affect the &lt;code&gt;master&lt;/code&gt; branch, so you're free to experiment and commit changes, safe in the knowledge that your branch won't be merged until it's ready to be reviewed by someone you're collaborating with.&lt;/p&gt;

    &lt;h4&gt;ProTip&lt;/h4&gt;

    &lt;p&gt;Branching is a core concept in Git, and the entire GitHub flow is based upon it. There's only one rule: anything in the &lt;code&gt;master&lt;/code&gt; branch is always deployable.&lt;/p&gt;

    &lt;p&gt;Because of this, it's extremely important that your new branch is created off of master when working on a feature or a fix. Your branch name should be descriptive (e.g., &lt;code&gt;refactor-authentication&lt;/code&gt;, &lt;code&gt;user-content-cache-key&lt;/code&gt;, &lt;code&gt;make-retina-avatars&lt;/code&gt;), so that others can see what is being worked on.&lt;/p&gt;

  &lt;/div&gt;

  &lt;div class=&quot;panel-content js-panel-content js-panel-content-commits&quot; data-step=&quot;commits&quot;&gt;
    &lt;h3&gt;Add commits&lt;/h3&gt;

    &lt;p&gt;Once your branch has been created, it's time to start making changes. Whenever you add, edit, or delete a file, you're making a commit, and adding them to your branch. This process of adding commits keeps track of your progress as you work on a feature branch.&lt;/p&gt;

    &lt;p&gt;Commits also create a transparent history of your work that others can follow to understand what you've done and why. Each commit has an associated commit message, which is a description explaining why a particular change was made. Furthermore, each commit is considered a separate unit of change. This lets you roll back changes if a bug is found, or if you decide to head in a different direction.&lt;/p&gt;

    &lt;h4&gt;ProTip&lt;/h4&gt;

    &lt;p&gt;Commit messages are important, especially since Git tracks your changes and then displays them as commits once they're pushed to the server. By writing clear commit messages, you can make it easier for other people to follow along and provide feedback.&lt;/p&gt;

  &lt;/div&gt;

  &lt;div class=&quot;panel-content js-panel-content js-panel-content-pr&quot; data-step=&quot;pr&quot;&gt;
    &lt;h3&gt;Open a Pull Request&lt;/h3&gt;

    &lt;p&gt;Pull Requests initiate discussion about your commits. Because they're tightly integrated with the underlying Git repository, anyone can see exactly what changes would be merged if they accept your request.&lt;/p&gt;

    &lt;p&gt;You can open a Pull Request at any point during the development process: when you have little or no code but want to share some screenshots or general ideas, when you're stuck and need help or advice, or when you're ready for someone to review your work. By using GitHub's @mention system in your Pull Request message, you can ask for feedback from specific people or teams, whether they're down the hall or ten time zones away.&lt;/p&gt;

    &lt;h4&gt;ProTip&lt;/h4&gt;

    &lt;p&gt;Pull Requests are useful for contributing to open source projects and for managing changes to shared repositories. If you're using a Fork &amp;amp; Pull Model, Pull Requests provide a way to notify project maintainers about the changes you'd like them to consider. If you're using a Shared Repository Model, Pull Requests help start code review and conversation about proposed changes before they're merged into the master branch.&lt;/p&gt;

  &lt;/div&gt;

  &lt;div class=&quot;panel-content js-panel-content js-panel-content-code-review&quot; data-step=&quot;code-review&quot;&gt;

    &lt;h3&gt;Discuss and review your code&lt;/h3&gt;

    &lt;p&gt;Once a Pull Request has been opened, the person or team reviewing your changes may have questions or comments. Perhaps the coding style doesn't match project guidelines, the change is missing unit tests, or maybe everything looks great and props are in order. Pull Requests are designed to encourage and capture this type of conversation.&lt;/p&gt;

    &lt;p&gt;You can also continue to push to your branch in light of discussion and feedback about your commits. If someone comments that you forgot to do something or if there is a bug in the code, you can fix it in your branch and push up the change. GitHub will show your new commits and any additional feedback you may receive in the unified Pull Request view.&lt;/p&gt;

    &lt;h4&gt;ProTip&lt;/h4&gt;

    &lt;p&gt;Pull Request comments are written in Markdown, so you can embed images and emoji, use pre-formatted text blocks, and other lightweight formatting.&lt;/p&gt;

  &lt;/div&gt;

  &lt;div class=&quot;panel-content js-panel-content js-panel-content-deploy&quot; data-step=&quot;deploy&quot;&gt;

    &lt;h3&gt;Deploy&lt;/h3&gt;

    &lt;p&gt;With GitHub, you can deploy from a branch for final testing in production before merging to master.&lt;/p&gt;

    &lt;p&gt;Once your pull request has been reviewed and the branch passes your tests, you can deploy your changes to verify them in production. If your branch causes issues, you can roll it back by deploying the existing master into production.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;panel-content js-panel-content js-panel-content-merge&quot; data-step=&quot;merge&quot;&gt;

    &lt;h3&gt;Merge&lt;/h3&gt;

    &lt;p&gt;Now that your changes have been verified in production, it is time to merge your code into the master branch.&lt;/p&gt;

    &lt;p&gt;Once merged, Pull Requests preserve a record of the historical changes to your code. Because they're searchable, they let anyone go back in time to understand why and how a decision was made.&lt;/p&gt;

    &lt;h4&gt;ProTip&lt;/h4&gt;

    &lt;p&gt;By incorporating certain keywords into the text of your Pull Request, you can associate issues with code. When your Pull Request is merged, the related issues are also closed. For example, entering the phrase &lt;code&gt;Closes #32&lt;/code&gt; would close issue number 32 in the repository. For more information, check out our &lt;a href=&quot;https://help.github.com/articles/closing-issues-via-commit-messages&quot;&gt;help article&lt;/a&gt;.&lt;/p&gt;

  &lt;/div&gt;

  &lt;a href=&quot;#&quot; class=&quot;panel-nav prev js-panel-nav-prev&quot; title=&quot;Previous&quot; data-proofer-ignore=&quot;&quot;&gt;
    &lt;span class=&quot;mega-octicon octicon-chevron-left&quot;&gt;&lt;/span&gt;
  &lt;/a&gt;

  &lt;a href=&quot;#&quot; class=&quot;panel-nav next js-panel-nav-next&quot; title=&quot;Next&quot; data-proofer-ignore=&quot;&quot;&gt;
    &lt;span class=&quot;mega-octicon octicon-chevron-right&quot;&gt;&lt;/span&gt;
  &lt;/a&gt;


&lt;/div&gt;
</description>
     </item>
     
   
     
     <item>
       <title>Hello World</title>
       
         <link>http://guides.github.com/activities/hello-world/</link>
       
       <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/activities/hello-world/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;intro&quot; title=&quot;Intro&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Hello World&lt;/strong&gt; project is a time-honored tradition in computer programming. It is a simple exercise that gets you started when learning something new. Let’s get started with GitHub!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You’ll learn how to:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create and use a repository&lt;/li&gt;
  &lt;li&gt;Start and manage a new branch&lt;/li&gt;
  &lt;li&gt;Make changes to a file and push them to GitHub as commits&lt;/li&gt;
  &lt;li&gt;Open and merge a pull request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a id=&quot;what&quot; title=&quot;What is GitHub?&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;What is GitHub?&lt;/h2&gt;

&lt;p&gt;GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere.&lt;/p&gt;

&lt;p&gt;This tutorial teaches you GitHub essentials like &lt;em&gt;repositories&lt;/em&gt;, &lt;em&gt;branches&lt;/em&gt;, &lt;em&gt;commits&lt;/em&gt;, and &lt;em&gt;Pull Requests&lt;/em&gt;. You’ll create your own Hello World repository and learn GitHub’s Pull Request workflow, a popular way to create and review code.&lt;/p&gt;

&lt;h4&gt;No coding necessary&lt;/h4&gt;

&lt;p&gt;To complete this tutorial, you need a &lt;a href=&quot;http://github.com&quot;&gt;GitHub.com account&lt;/a&gt; and Internet access. You don’t need to know how to code, use the command line, or install Git (the version control software GitHub is built on).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Open this guide in a separate browser window (or tab) so you can see it while you complete the steps in the tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id=&quot;repository&quot; title=&quot;Create a Repository&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 1. Create a Repository&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;repository&lt;/strong&gt; is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets – anything your project needs. We recommend including a &lt;em&gt;README&lt;/em&gt;, or a file with information about your project. GitHub makes it easy to add one at the same time you create your new repository. &lt;em&gt;It also offers other common options such as a license file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello-world&lt;/code&gt; repository can be a place where you store ideas, resources, or even share and discuss things with others.&lt;/p&gt;

&lt;h3&gt;To create a new repository&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;In the upper right corner, next to your avatar or identicon, click &lt;span class=&quot;octicon octicon-plus&quot;&gt;&lt;/span&gt; and then select &lt;strong&gt;New repository&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Name your repository &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello-world&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Write a short description.&lt;/li&gt;
  &lt;li&gt;Select &lt;strong&gt;Initialize this repository with a README&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/activities/hello-world/create-new-repo.png&quot; alt=&quot;new-repo-form&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Create repository&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;branch&quot; title=&quot;Create a Branch&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 2. Create a Branch&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Branching&lt;/strong&gt; is the way to work on different versions of a repository at one time.&lt;/p&gt;

&lt;p&gt;By default your repository has one branch named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; which is considered to be the definitive branch. We use branches to experiment and make edits before committing them to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you create a branch off the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch, you’re making a copy, or snapshot, of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; as it was at that point in time. If someone else made changes to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch while you were working on your branch, you could pull in those updates.&lt;/p&gt;

&lt;p&gt;This diagram shows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch&lt;/li&gt;
  &lt;li&gt;A new branch called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt; (because we’re doing ‘feature work’ on this branch)&lt;/li&gt;
  &lt;li&gt;The journey that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feature&lt;/code&gt; takes before it’s merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/activities/hello-world/branching.png&quot; alt=&quot;a branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have you ever saved different versions of a file? Something like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;story.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;story-joe-edit.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;story-joe-edit-reviewed.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Branches accomplish similar goals in GitHub repositories.&lt;/p&gt;

&lt;p&gt;Here at GitHub, our developers, writers, and designers use branches for keeping bug fixes and feature work separate from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; (production) branch. When a change is ready, they merge their branch into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;To create a new branch&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go to your new repository &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello-world&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Click the drop down at the top of the file list that says &lt;strong&gt;branch: master&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Type a branch name, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readme-edits&lt;/code&gt;, into the new branch text box.&lt;/li&gt;
  &lt;li&gt;Select the blue &lt;strong&gt;Create branch&lt;/strong&gt; box or hit “Enter” on your keyboard.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/activities/hello-world/readme-edits.gif&quot; alt=&quot;branch gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you have two branches, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readme-edits&lt;/code&gt;. They look exactly the same, but not for long! Next we’ll add our changes to the new branch.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;commit&quot; title=&quot;Make a Commit&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 3. Make and commit changes&lt;/h2&gt;

&lt;p&gt;Bravo! Now, you’re on the code view for your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readme-edits&lt;/code&gt; branch, which is a copy of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;. Let’s make some edits.&lt;/p&gt;

&lt;p&gt;On GitHub, saved changes are called &lt;em&gt;commits&lt;/em&gt;. Each commit has an associated &lt;em&gt;commit message&lt;/em&gt;, which is a description explaining why a particular change was made. Commit messages capture the history of your changes, so other contributors can understand what you’ve done and why.&lt;/p&gt;

&lt;h4&gt;Make and commit changes&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Click the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;README.md&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Click the &lt;span class=&quot;octicon octicon-pencil&quot;&gt;&lt;/span&gt; pencil icon in the upper right corner of the file view to edit.&lt;/li&gt;
  &lt;li&gt;In the editor, write a bit about yourself.&lt;/li&gt;
  &lt;li&gt;Write a commit message that describes your changes.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Commit changes&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/activities/hello-world/commit.png&quot; alt=&quot;commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These changes will be made to just the README file on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readme-edits&lt;/code&gt; branch, so now this branch contains content that’s different from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;pr&quot; title=&quot;Open a Pull Request&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 4. Open a Pull Request&lt;/h2&gt;

&lt;p&gt;Nice edits! Now that you have changes in a branch off of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;, you can open a &lt;em&gt;pull request&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pull Requests are the heart of collaboration on GitHub. When you open a &lt;em&gt;pull request&lt;/em&gt;, you’re proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show &lt;em&gt;diffs&lt;/em&gt;, or differences, of the content from both branches. The changes, additions, and subtractions are shown in green and red.&lt;/p&gt;

&lt;p&gt;As soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.&lt;/p&gt;

&lt;p&gt;By using GitHub’s &lt;a href=&quot;https://help.github.com/articles/about-writing-and-formatting-on-github/#text-formatting-toolbar&quot;&gt;@mention system&lt;/a&gt; in your pull request message, you can ask for feedback from specific people or teams, whether they’re down the hall or 10 time zones away.&lt;/p&gt;

&lt;p&gt;You can even open pull requests in your own repository and merge them yourself. It’s a great way to learn the GitHub flow before working on larger projects.&lt;/p&gt;

&lt;h4&gt;Open a Pull Request for changes to the README&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Click on the image for a larger version&lt;/em&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Step&lt;/th&gt;
      &lt;th&gt;Screenshot&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Click the &lt;span class=&quot;octicon octicon-git-pull-request&quot;&gt;&lt;/span&gt; &lt;strong&gt;Pull Request&lt;/strong&gt; tab, then from the Pull Request page, click the green &lt;strong&gt;New pull request&lt;/strong&gt; button.&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;pr-tab.gif&quot;&gt;&lt;img src=&quot;/activities/hello-world/pr-tab.gif&quot; alt=&quot;pr-tab&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;In the &lt;strong&gt;Example Comparisons&lt;/strong&gt; box, select the branch you made, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readme-edits&lt;/code&gt;, to compare with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; (the original).&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;pick-branch.png&quot;&gt;&lt;img src=&quot;/activities/hello-world/pick-branch.png&quot; alt=&quot;branch&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Look over your changes in the diffs on the Compare page, make sure they’re what you want to submit.&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;diff.png&quot;&gt;&lt;img src=&quot;/activities/hello-world/diff.png&quot; alt=&quot;diff&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;When you’re satisfied that these are the changes you want to submit, click the big green &lt;strong&gt;Create Pull Request&lt;/strong&gt; button.&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;create-pr.png&quot;&gt;&lt;img src=&quot;/activities/hello-world/create-pr.png&quot; alt=&quot;create-pull&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Give your pull request a title and write a brief description of your changes.&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;pr-form.png&quot;&gt;&lt;img src=&quot;/activities/hello-world/pr-form.png&quot; alt=&quot;pr-form&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When you’re done with your message, click &lt;strong&gt;Create pull request&lt;/strong&gt;!&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: You can use &lt;a href=&quot;https://help.github.com/articles/basic-writing-and-formatting-syntax/#using-emoji&quot;&gt;emoji&lt;/a&gt; and &lt;a href=&quot;https://help.github.com/articles/file-attachments-on-issues-and-pull-requests/&quot;&gt;drag and drop images and gifs&lt;/a&gt; onto comments and Pull Requests.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id=&quot;merge&quot; title=&quot;Merge Pull Request&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Step 5. Merge your Pull Request&lt;/h2&gt;

&lt;p&gt;In this final step, it’s time to bring your changes together – merging your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readme-edits&lt;/code&gt; branch into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Click the green &lt;strong&gt;Merge pull request&lt;/strong&gt; button to merge the changes into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Click &lt;strong&gt;Confirm merge&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Go ahead and delete the branch, since its changes have been incorporated, with the &lt;strong&gt;Delete branch&lt;/strong&gt; button in the purple box.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/activities/hello-world/merge-button.png&quot; alt=&quot;merge&quot; /&gt;
&lt;img src=&quot;/activities/hello-world/delete-button.png&quot; alt=&quot;delete&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Celebrate!&lt;/h3&gt;

&lt;p&gt;By completing this tutorial, you’ve learned to create a project and make a pull request on GitHub!&lt;/p&gt;

&lt;p&gt;Here’s what you accomplished in this tutorial:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created an open source repository&lt;/li&gt;
  &lt;li&gt;Started and managed a new branch&lt;/li&gt;
  &lt;li&gt;Changed a file and committed those changes to GitHub&lt;/li&gt;
  &lt;li&gt;Opened and merged a Pull Request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at your GitHub profile and you’ll see your new &lt;a href=&quot;https://help.github.com/articles/viewing-contributions&quot;&gt;contribution squares&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;To learn more about the power of Pull Requests, we recommend reading the &lt;a href=&quot;http://guides.github.com/overviews/flow/&quot;&gt;GitHub flow Guide&lt;/a&gt;. You might also visit &lt;a href=&quot;http://github.com/explore&quot;&gt;GitHub Explore&lt;/a&gt; and get involved in an Open Source project.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Check out our other &lt;a href=&quot;http://guides.github.com&quot;&gt;Guides&lt;/a&gt;, &lt;a href=&quot;http://youtube.com/githubguides&quot;&gt;YouTube Channel&lt;/a&gt; and &lt;a href=&quot;https://services.github.com/on-demand/&quot;&gt;On-Demand Training&lt;/a&gt; for more on how to get started with GitHub.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
     </item>
     
   
     
     <item>
       <title>Forking Projects</title>
       
         <link>http://guides.github.com/activities/forking/</link>
       
       <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/activities/forking/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;contributing&quot; title=&quot;Contributing to a project&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;
After using GitHub by yourself for a while, you may find yourself wanting to contribute to someone else’s project. Or maybe you’d like to use someone’s project as the starting point for your own. This process is known as &lt;em&gt;forking.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Creating a “fork” is producing a personal copy of someone else’s project. Forks act as a sort of bridge between the original repository and your personal copy. You can submit &lt;em&gt;Pull Requests&lt;/em&gt; to help make other people’s projects better by offering your changes up to the original project. Forking is at the core of social coding at GitHub.&lt;/p&gt;

&lt;p&gt;For this tutorial, we’ll be using &lt;a href=&quot;https://github.com/octocat/Spoon-Knife&quot;&gt;the Spoon-Knife project&lt;/a&gt;, a test repository that’s hosted on GitHub.com that lets you test the Pull Request workflow.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;fork&quot; title=&quot;Fork the repository&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Fork the repository&lt;/h2&gt;

&lt;p&gt;To fork the Spoon-Knife repository, click the &lt;strong&gt;Fork&lt;/strong&gt; button in the header of the repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github-images.s3.amazonaws.com/help/bootcamp/Bootcamp-Fork.png&quot; alt=&quot;A repository's fork button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sit back and watch the forking magic. When it’s finished, you’ll be taken to your copy of the Spoon-Knife repository.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;clone&quot; title=&quot;Clone your fork&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Clone your fork&lt;/h2&gt;

&lt;p&gt;You’ve successfully forked the Spoon-Knife repository, but so far, it only exists on GitHub. To be able to work on the project, you will need to clone it to your computer.&lt;/p&gt;

&lt;p&gt;If you’re using &lt;a href=&quot;https://desktop.github.com/&quot;&gt;GitHub Desktop&lt;/a&gt;, this process is a breeze. On your fork of Spoon-Knife, navigate over to the right hand side bar and click &lt;strong&gt;Clone or Download&lt;/strong&gt;. How you clone is up to you. Some options are &lt;a href=&quot;https://services.github.com/on-demand/github-cli/clone-repo-cli&quot;&gt;cloning with the command line&lt;/a&gt;, or by &lt;a href=&quot;https://services.github.com/on-demand/github-desktop/clone-repository-github-desktop&quot;&gt;using GitHub Desktop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;making-changes&quot; title=&quot;Making and pushing changes&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Making and pushing changes&lt;/h2&gt;

&lt;p&gt;Go ahead and make a few changes to the project using your favorite text editor, like &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt;. You could, for example, change the text in &lt;em&gt;index.html&lt;/em&gt; to add your GitHub username.&lt;/p&gt;

&lt;p&gt;When you’re ready to submit your changes, &lt;strong&gt;stage&lt;/strong&gt; and &lt;strong&gt;commit&lt;/strong&gt; your changes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Is staging and committing changes locally too advanced right now? &lt;a href=&quot;https://services.github.com/on-demand/&quot;&gt;Check out this on-demand training&lt;/a&gt; for interactive tutorials to help you learn more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Right now, you’ve essentially told Git, “Okay, I’ve taken a snapshot of my changes!” You can continue to make more changes, and take more commit snapshots. When you’re ready to push your changes up to GitHub.com, push your changes to the remote.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;making-a-pull-request&quot; title=&quot;Making a Pull Request&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Making a Pull Request&lt;/h2&gt;

&lt;p&gt;At last, you’re ready to propose changes into the main project! This is the final step in producing a fork of someone else’s project, and arguably the most important. If you’ve made a change that you feel would benefit the community as a whole, you should definitely consider contributing back.&lt;/p&gt;

&lt;p&gt;To do so, head on over to the repository on GitHub.com where your project lives. For this example, it would be at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.github.com/&amp;lt;your_username&amp;gt;/Spoon-Knife&lt;/code&gt;. You’ll see a banner indicating that you’ve recently pushed a new branch, and that you can submit this branch “upstream,” to the original repository:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github-images.s3.amazonaws.com/help/pull_requests/recently_pushed_branch.png&quot; alt=&quot;Recently pushed branch banner&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on &lt;strong&gt;Compare and Pull Request&lt;/strong&gt; sends you to a discussion page, where you can enter a title and optional description. It’s important to provide as much useful information and a rationale for &lt;em&gt;why&lt;/em&gt; you’re making this Pull Request in the first place. The project owner needs to be able to determine whether your change is as useful to everyone as you think it is.&lt;/p&gt;

&lt;p&gt;When you’re ready typing out your heartfelt argument, click on &lt;strong&gt;Send pull request&lt;/strong&gt;. You’re done!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github-images.s3.amazonaws.com/help/pull_requests/pullrequest-send.png&quot; alt=&quot;Send Pull Request button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pull Requests are an area for discussion. In this case, the Octocat is very busy, and probably won’t merge your changes. For other projects, don’t be offended if the project owner rejects your Pull Request, or asks for more information on why it’s been made. It may even be that the project owner chooses not to merge your pull request, and that’s totally okay. Your copy will exist in infamy on the Internet. And who knows–maybe someone you’ve never met will find your changes much more valuable than the original project. Share and share alike!&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;huzzah&quot; title=&quot;Huzzah!&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Huzzah!&lt;/h2&gt;

&lt;p&gt;You’ve successfully forked and contributed back to a repository. Go forth, and
contribute some more!&lt;/p&gt;
</description>
     </item>
     
   
     
     <item>
       <title>Be Social</title>
       
         <link>http://guides.github.com/activities/socialize/</link>
       
       <pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/activities/socialize/index.md</guid>
       <description>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;socialize.css&quot; /&gt;

&lt;p&gt;&lt;a id=&quot;intro&quot; title=&quot;Intro&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With more and more people joining GitHub and adding projects every day, keeping up with all of them can be difficult. However, this can be fun and easy by following users or watching repositories, simply showing interest in them by starring, or using Explore to find new people and projects.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;follow-a-friend&quot; title=&quot;Follow A Friend&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Follow a Friend&lt;/h2&gt;

&lt;p&gt;One of the great features on GitHub is the ability to see what other people are working on and who they are connecting with.
When you follow someone, you’ll get notifications about their GitHub activity. Following friends
helps you find new projects and new people that you may share interests with. You can see what some of your friends are
interested in by looking at your &lt;a href=&quot;https://github.com/dashboard&quot;&gt;personal dashboard&lt;/a&gt; or you can check out what’s going on in the GitHub community by looking at &lt;a href=&quot;https://github.com/explore&quot;&gt;the Explore page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Step 1: Pick a friend.&lt;/h3&gt;

&lt;p&gt;Why not follow one of these cool people from GitHub:&lt;/p&gt;

&lt;div class=&quot;founders&quot;&gt;
  
  
  &lt;a href=&quot;https://github.com/cheshire137&quot; class=&quot;founder&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;avatar&quot; alt=&quot;cheshire137&quot; width=&quot;86&quot; height=&quot;86&quot; data-proofer-ignore=&quot;true&quot; src=&quot;https://avatars3.githubusercontent.com/cheshire137?v=3&amp;amp;s=86&quot; srcset=&quot;https://avatars3.githubusercontent.com/cheshire137?v=3&amp;amp;s=86 1x, https://avatars3.githubusercontent.com/cheshire137?v=3&amp;amp;s=172 2x, https://avatars3.githubusercontent.com/cheshire137?v=3&amp;amp;s=258 3x, https://avatars3.githubusercontent.com/cheshire137?v=3&amp;amp;s=344 4x&quot; /&gt;
    &lt;p&gt;&lt;strong&gt;cheshire137&lt;/strong&gt;&lt;/p&gt;
  &lt;/a&gt;
  
  &lt;a href=&quot;https://github.com/charliesome&quot; class=&quot;founder&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;avatar&quot; alt=&quot;charliesome&quot; width=&quot;86&quot; height=&quot;86&quot; data-proofer-ignore=&quot;true&quot; src=&quot;https://avatars3.githubusercontent.com/charliesome?v=3&amp;amp;s=86&quot; srcset=&quot;https://avatars3.githubusercontent.com/charliesome?v=3&amp;amp;s=86 1x, https://avatars3.githubusercontent.com/charliesome?v=3&amp;amp;s=172 2x, https://avatars3.githubusercontent.com/charliesome?v=3&amp;amp;s=258 3x, https://avatars3.githubusercontent.com/charliesome?v=3&amp;amp;s=344 4x&quot; /&gt;
    &lt;p&gt;&lt;strong&gt;charliesome&lt;/strong&gt;&lt;/p&gt;
  &lt;/a&gt;
  
  &lt;a href=&quot;https://github.com/benbalter&quot; class=&quot;founder&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;avatar&quot; alt=&quot;benbalter&quot; width=&quot;86&quot; height=&quot;86&quot; data-proofer-ignore=&quot;true&quot; src=&quot;https://avatars2.githubusercontent.com/benbalter?v=3&amp;amp;s=86&quot; srcset=&quot;https://avatars2.githubusercontent.com/benbalter?v=3&amp;amp;s=86 1x, https://avatars2.githubusercontent.com/benbalter?v=3&amp;amp;s=172 2x, https://avatars2.githubusercontent.com/benbalter?v=3&amp;amp;s=258 3x, https://avatars2.githubusercontent.com/benbalter?v=3&amp;amp;s=344 4x&quot; /&gt;
    &lt;p&gt;&lt;strong&gt;benbalter&lt;/strong&gt;&lt;/p&gt;
  &lt;/a&gt;
  
  &lt;a href=&quot;https://github.com/jeffrafter&quot; class=&quot;founder&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;avatar&quot; alt=&quot;jeffrafter&quot; width=&quot;86&quot; height=&quot;86&quot; data-proofer-ignore=&quot;true&quot; src=&quot;https://avatars2.githubusercontent.com/jeffrafter?v=3&amp;amp;s=86&quot; srcset=&quot;https://avatars2.githubusercontent.com/jeffrafter?v=3&amp;amp;s=86 1x, https://avatars2.githubusercontent.com/jeffrafter?v=3&amp;amp;s=172 2x, https://avatars2.githubusercontent.com/jeffrafter?v=3&amp;amp;s=258 3x, https://avatars2.githubusercontent.com/jeffrafter?v=3&amp;amp;s=344 4x&quot; /&gt;
    &lt;p&gt;&lt;strong&gt;jeffrafter&lt;/strong&gt;&lt;/p&gt;
  &lt;/a&gt;
  
  &lt;a href=&quot;https://github.com/muan&quot; class=&quot;founder&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;avatar&quot; alt=&quot;muan&quot; width=&quot;86&quot; height=&quot;86&quot; data-proofer-ignore=&quot;true&quot; src=&quot;https://avatars3.githubusercontent.com/muan?v=3&amp;amp;s=86&quot; srcset=&quot;https://avatars3.githubusercontent.com/muan?v=3&amp;amp;s=86 1x, https://avatars3.githubusercontent.com/muan?v=3&amp;amp;s=172 2x, https://avatars3.githubusercontent.com/muan?v=3&amp;amp;s=258 3x, https://avatars3.githubusercontent.com/muan?v=3&amp;amp;s=344 4x&quot; /&gt;
    &lt;p&gt;&lt;strong&gt;muan&lt;/strong&gt;&lt;/p&gt;
  &lt;/a&gt;
  
  &lt;a href=&quot;https://github.com/pifafu&quot; class=&quot;founder&quot; target=&quot;_blank&quot;&gt;
    &lt;img class=&quot;avatar&quot; alt=&quot;pifafu&quot; width=&quot;86&quot; height=&quot;86&quot; data-proofer-ignore=&quot;true&quot; src=&quot;https://avatars3.githubusercontent.com/pifafu?v=3&amp;amp;s=86&quot; srcset=&quot;https://avatars3.githubusercontent.com/pifafu?v=3&amp;amp;s=86 1x, https://avatars3.githubusercontent.com/pifafu?v=3&amp;amp;s=172 2x, https://avatars3.githubusercontent.com/pifafu?v=3&amp;amp;s=258 3x, https://avatars3.githubusercontent.com/pifafu?v=3&amp;amp;s=344 4x&quot; /&gt;
    &lt;p&gt;&lt;strong&gt;pifafu&lt;/strong&gt;&lt;/p&gt;
  &lt;/a&gt;
  
&lt;/div&gt;

&lt;h3&gt;Step 2: Follow that friend&lt;/h3&gt;

&lt;p&gt;Once you are on someone’s profile, click the “follow” button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github-images.s3.amazonaws.com/help/profile/follow-user-button.png&quot; alt=&quot;Follow user button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You are now following a friend.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;watch-a-project&quot; title=&quot;Watch A Project&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Watch a Project’s Repository&lt;/h2&gt;

&lt;p&gt;At some point you may want to stay up-to-date with a specific project. This is similar to following a person, except
the focus is narrowed to only events in the project’s repository. You can choose to have notifications for this repository sent via email or viewable on the web by &lt;a href=&quot;https://github.com/settings/notifications&quot;&gt;configuring your settings&lt;/a&gt;. Typical notifications would be comments on a Pull Request or an issue, or just a comment anywhere within the repository.&lt;/p&gt;

&lt;p&gt;Our friend the Octocat has a repository called &lt;a href=&quot;https://github.com/octocat/Hello-World&quot;&gt;Hello World&lt;/a&gt; that we’d like to watch.&lt;/p&gt;

&lt;p&gt;Once you are on the repository page, you will notice there is a “watch” button at the top of the page. Click on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github-images.s3.amazonaws.com/help/repository/repo-actions-watch.png&quot; alt=&quot;Watch repository button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You are now watching the Hello World repository. If the Octocat updates it, you will see what happened in your dashboard or receive a notification.&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;explore&quot; title=&quot;More Things You Can Do&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;More Things You Can Do&lt;/h2&gt;

&lt;p&gt;You’ve done some of the most basic social interaction GitHub has to offer, but don’t stop there! Check out these other social features:&lt;/p&gt;

&lt;h4&gt;Stargazing&lt;/h4&gt;

&lt;p&gt;If you’re interested in some of the repositories your friends have starred in the past, but you no longer see it on your dashboard, head over to your &lt;a href=&quot;https://github.com/stars&quot;&gt;stars page&lt;/a&gt; and jump to another user!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/socialize/jump-to-another-user.png&quot; alt=&quot;Jump to another user&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;Discover Repositories&lt;/h4&gt;

&lt;p&gt;After you’ve watched, followed, and starred your favorite people and repositories on GitHub, head over to your &lt;a href=&quot;https://github.com/dashboard/discover&quot;&gt;Discover Repositories&lt;/a&gt; page to see personalized repository recommendations based on these things!&lt;/p&gt;

&lt;h4&gt;Explore / Newsletter&lt;/h4&gt;

&lt;p&gt;The Explore page has repositories that have been starred by people you follow, GitHub staff, and general trending repositories right on the first page.&lt;/p&gt;

&lt;p&gt;If you want to receive these as a newsletter daily, weekly, or monthly, check out the newsletter announcement at the bottom of the Explore page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/socialize/subscribe-explore.png&quot; alt=&quot;Newsletter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also configure this setting later at &lt;a href=&quot;https://github.com/explore/subscribe&quot;&gt;the subscription page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to view just trending repositories and users, &lt;a href=&quot;https://github.com/trending&quot;&gt;head over to Trending&lt;/a&gt; and take a look.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/socialize/trending.png&quot; alt=&quot;trending&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;celebrate&quot; title=&quot;Celebrate&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Celebrate&lt;/h2&gt;

&lt;p&gt;Congratulations! You are quite the socialite. Check out some of these next steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/categories/importing-your-projects-to-github/&quot;&gt;Getting your project on GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/activities/forking/&quot;&gt;Fork A Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
     </item>
     
   
     
     <item>
       <title>Making Your Code Citable</title>
       
         <link>http://guides.github.com/activities/citable-code/</link>
       
       <pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate>
       <guid isPermaLink="true">http://guides.github.com/activities/citable-code/index.md</guid>
       <description>&lt;p&gt;&lt;a id=&quot;intro&quot; title=&quot;Intro&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Digital_object_identifier&quot;&gt;Digital Object Identifiers&lt;/a&gt; (DOI) are the backbone of the academic reference and metrics system. If you’re a researcher writing software, this guide will show you how to make the work you share on GitHub citable by archiving one of your GitHub repositories and assigning a DOI with the data archiving tool &lt;a href=&quot;https://zenodo.org/about&quot;&gt;Zenodo&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;ProTip:&lt;/strong&gt; This tutorial is aimed at researchers who want to cite GitHub repositories in academic literature. Provided you’ve already set up a GitHub repository, this tutorial can be completed without installing any special software. If you haven’t yet created a project on GitHub, start first by &lt;a href=&quot;https://help.github.com/categories/importing-your-projects-to-github/&quot;&gt;uploading your work&lt;/a&gt; to a repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id=&quot;repository&quot; title=&quot;Choosing Your Repo&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Choose your repository&lt;/h2&gt;

&lt;p&gt;Repositories are the most basic element of GitHub. They’re easiest to imagine as your project’s folder. The first step in creating a DOI is to select the repository you want to archive in Zenodo. To do so, head over to your profile and click the &lt;strong&gt;Repositories&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/repos.png&quot; alt=&quot;login&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; Make sure you tell people how they can reuse your work by including a license in your repository. If you don’t know which license is right for you, then take a look at &lt;a href=&quot;http://choosealicense.com/&quot;&gt;choosealicense.com&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id=&quot;login&quot; title=&quot;Login to Zenodo&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Login to Zenodo&lt;/h2&gt;

&lt;p&gt;Next, head over to &lt;a href=&quot;http://zenodo.org&quot;&gt;Zenodo&lt;/a&gt; and click the &lt;strong&gt;Log in&lt;/strong&gt; button at the top right of the page, which gives you an option to login with your GitHub account.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/zenodo-login.png&quot; alt=&quot;login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Zenodo will redirect you back to GitHub to ask for your permission to share your email address and the ability to configure &lt;a href=&quot;https://developer.github.com/webhooks/&quot;&gt;webhooks&lt;/a&gt; on your repositories. Go ahead and click &lt;strong&gt;Authorize application&lt;/strong&gt; to give Zenodo the permissions it needs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; If you want to archive a repository that belongs to an organization on GitHub, you will need to make sure that the organization administrator has enabled &lt;a href=&quot;https://help.github.com/articles/approving-third-party-applications-for-your-organization/&quot;&gt;third-party access&lt;/a&gt; to the Zenodo application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/zenodo-authorize.png&quot; alt=&quot;auth&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Pick the repository you want to archive&lt;/h3&gt;

&lt;p&gt;At this point, you’ve authorized Zenodo to configure the repository webhooks needed to allow for archiving and DOI-issuing. To enable this functionality, simply click the &lt;strong&gt;On&lt;/strong&gt; toggle button next to your repository (in this case &lt;strong&gt;My-Awesome-Science-Software&lt;/strong&gt;).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; Zenodo can only access your public repositories so make sure the repository you want to archive is &lt;a href=&quot;https://help.github.com/articles/making-a-private-repository-public/&quot;&gt;public&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/zenodo-toggle-on.png&quot; alt=&quot;toggle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;check&quot; title=&quot;Check Repo Settings&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Check repository settings&lt;/h2&gt;

&lt;p&gt;By enabling archiving in Zenodo, you have set up a new webhook on your repository. Click the settings tab on your repository, and then click ‘Webhooks’ in the left-hand menu. You should see something like the image below, which shows a new webhook configured to send messages to Zenodo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/webhook-view.png&quot; alt=&quot;webhooks&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;create&quot; title=&quot;Create a New Release&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Create a new release&lt;/h2&gt;

&lt;p&gt;By default, Zenodo takes an archive of your GitHub repository each time you create a new &lt;a href=&quot;https://help.github.com/articles/about-releases&quot;&gt;Release&lt;/a&gt;. To test this out, head back to the main repository view and click on the &lt;strong&gt;releases&lt;/strong&gt; header item.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/repo-view.png&quot; alt=&quot;repo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unless you’ve created releases for this repository before, you will be asked to &lt;strong&gt;Create a new release&lt;/strong&gt;. Go ahead and click this button and fill in the new release form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/create-release.png&quot; alt=&quot;create-release&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this is the first release of your code then you should give it a version number of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1.0.0&lt;/code&gt;. Fill in any release notes and click the &lt;strong&gt;Publish release&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/first-release.png&quot; alt=&quot;first-release&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Checking everything has worked&lt;/h2&gt;

&lt;p&gt;Creating a new release will trigger Zenodo into archiving your repository. You can confirm that this process took place by click the &lt;strong&gt;Upload&lt;/strong&gt; tab in your Zenodo profile. You should see a new upload in the right-hand panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/upload-tab.png&quot; alt=&quot;uploads&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;finishing&quot; title=&quot;Minting a DOI&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Minting a DOI&lt;/h2&gt;

&lt;p&gt;Before Zenodo can issue a DOI for your repository, you will need to provide some information about the GitHub repo that you’ve just archived.&lt;/p&gt;

&lt;p&gt;Once you’re happy with the description of your software, click the &lt;strong&gt;Publish&lt;/strong&gt; button at the bottom of the Zenodo form, and voilà, you’ve just made a new DOI for your GitHub repository!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/zenodo-form.png&quot; alt=&quot;form&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id=&quot;finishing-up&quot; title=&quot;Finishing up&quot; class=&quot;toc-item&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Finishing up&lt;/h2&gt;

&lt;p&gt;Back on your &lt;a href=&quot;https://zenodo.org/account/settings/github&quot; data-proofer-ignore=&quot;&quot;&gt;Zenodo GitHub page&lt;/a&gt; you should now see your repository listed with a shiny new badge showing your new DOI!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;ProTip:&lt;/strong&gt; If you really want to show off, then right click on the gray and blue DOI image and copy the URL and place it in your README on your GitHub repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/activities/citable-code/releases-present.png&quot; alt=&quot;releases-present&quot; /&gt;&lt;/p&gt;
</description>
     </item>
     
   
     
   
     
   
     
   
     
   
     
   
     
   
     
   
     
   

  </channel>
</rss>
